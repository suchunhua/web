'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _base = require('./base.js');

var _base2 = _interopRequireDefault(_base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _class = function (_Base) {
	(0, _inherits3.default)(_class, _Base);

	function _class() {
		(0, _classCallCheck3.default)(this, _class);
		return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));
	}

	_class.prototype.postAction = function () {
		var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
			var username, oldword, newword, tokenService, tokenServiceInstance, userInfo, user;
			return _regenerator2.default.wrap(function _callee$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							// console.log(this.http.headers.token);
							username = this.post('username');
							oldword = this.post('old');
							newword = this.post('new');

							if (!(!oldword || !newword)) {
								_context.next = 5;
								break;
							}

							return _context.abrupt('return', this.fail('ADMIN_PARAM_LACKED'));

						case 5:
							tokenService = think.service("token");
							tokenServiceInstance = new tokenService();
							_context.next = 9;
							return tokenServiceInstance.verifyToken(this.http.headers.token);

						case 9:
							userInfo = _context.sent;

							console.log(userInfo);
							_context.next = 13;
							return this.model('admin').where({ id: userInfo.userInfo.id }).field(['id,username,password']).select();

						case 13:
							user = _context.sent;

							if (!(user[0].password == oldword)) {
								_context.next = 23;
								break;
							}

							user[0].password = newword;
							_context.t0 = this;
							_context.next = 19;
							return this.model('admin').update(user[0]);

						case 19:
							_context.t1 = _context.sent;
							return _context.abrupt('return', _context.t0.success.call(_context.t0, _context.t1));

						case 23:
							return _context.abrupt('return', this.fail('原密码错误'));

						case 24:
						case 'end':
							return _context.stop();
					}
				}
			}, _callee, this);
		}));

		function postAction() {
			return _ref.apply(this, arguments);
		}

		return postAction;
	}();

	return _class;
}(_base2.default);

exports.default = _class;
//# sourceMappingURL=modify.js.map
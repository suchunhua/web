'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _class = function (_think$controller$res) {
  (0, _inherits3.default)(_class, _think$controller$res);

  function _class() {
    (0, _classCallCheck3.default)(this, _class);
    return (0, _possibleConstructorReturn3.default)(this, _think$controller$res.apply(this, arguments));
  }

  /**
   * init
   * @param  {Object} http []
   * @return {}      []
   */
  _class.prototype.init = function init(http) {
    _think$controller$res.prototype.init.call(this, http);
  };

  /**
   * before magic method
   * @return {Promise} []
   */


  _class.prototype.__before = function __before() {};

  _class.prototype.postAction = function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
      var username, password, admin, tokenService, tokenServiceInstance, token;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              username = this.post('username');
              password = this.post('password');
              _context.next = 4;
              return this.model('admin').where({ username: username, password: password }).find();

            case 4:
              admin = _context.sent;

              if (think.isEmpty(admin)) {
                _context.next = 15;
                break;
              }

              //调用tokenservice中间件
              tokenService = think.service("token");
              tokenServiceInstance = new tokenService();
              //写入token

              _context.next = 10;
              return tokenServiceInstance.createToken({
                userInfo: {
                  id: admin.id,
                  name: admin.username
                }
              });

            case 10:
              token = _context.sent;

              //传输客户端token
              this.http.header("token", token);
              // this.session(token,admin);
              // console.log(this.session);
              return _context.abrupt('return', this.success({ token: token, data: { id: admin.id,
                  name: admin.username } }));

            case 15:
              return _context.abrupt('return', this.fail("LOGIN_ERROR"));

            case 16:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function postAction() {
      return _ref.apply(this, arguments);
    }

    return postAction;
  }();

  return _class;
}(think.controller.rest);

exports.default = _class;
;
//# sourceMappingURL=login.js.map